Index: src/Partida.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import utilidades.Util;\r\nimport java.util.ArrayList;\r\n\r\npublic class Partida {\r\n\r\n    protected ArrayList <Carta> baraja;\r\n\r\n    /**\r\n     * Constructor de baraja que no recibe nada\r\n     */\r\n    public Partida() {\r\n        baraja = new ArrayList<Carta>();\r\n    }\r\n    public void gerenerarBaraja()\r\n    {\r\n\r\n        /*BANDERAS PARA VER SI SE HA COMPLETADO UN PALO CON SUS 13 CARTAS*/\r\n        boolean picas = false;\r\n        boolean corazones = false;\r\n        boolean trebol = false;\r\n        boolean diamantes = false;\r\n        boolean existeCarta =false;\r\n        do{ // BUCLE PARA LA CREACION DE LAS 52 CARTAS\r\n            existeCarta=false; // con esto salen las 52\r\n            int numCart = Util.getNumber(1,13); // numero aleatorio delos valores de la carta\r\n            int numPalo = Util.getNumber(1,4); // numero aleatorio para escoger palo\r\n            if(baraja.isEmpty()) // si esta vacia add la carta sea cual sea\r\n            {\r\n                baraja.add(new Carta(numCart,obtenerPalo(numPalo)));\r\n            }\r\n            else {\r\n                for (int i=0; i<baraja.size();i++)  // Comprobamos si existe la carta\r\n                {\r\n\r\n                    Carta cartaActual = baraja.get(i);\r\n                    if(cartaActual.getNumero()==numCart && cartaActual.getPalo()==obtenerPalo(numPalo))\r\n                    {\r\n                        existeCarta = true; // existe\r\n                    }\r\n                }\r\n                if (!existeCarta) // si no existe carta, la creamos\r\n                {\r\n                    baraja.add(new Carta(numCart,obtenerPalo(numPalo)));\r\n                }\r\n            }\r\n\r\n        } while(baraja.size()!=52); // mientras que la baraja no este llena\r\n    }\r\n\r\n    /**\r\n     * Metodo para obtener el Palo dando un int\r\n     * @param numPalo\r\n     * @return Palo / null\r\n     */\r\n    public Palo obtenerPalo(int numPalo) {\r\n        switch (numPalo)\r\n        {\r\n            case 1:\r\n                return Palo.PICAS;\r\n            case 2:\r\n                return Palo.CORAZONES;\r\n            case 3:\r\n                return Palo.TREBOL;\r\n            case 4:\r\n                return Palo.DIAMANTES;\r\n\r\n        }\r\n        return null;\r\n    }\r\n    public boolean comprobarPaloCompleto(Palo palo)\r\n    {\r\n        int cont = 0;\r\n        for (int j=0; j<baraja.size(); j++)\r\n        {\r\n            Carta cartaActual = baraja.get(j);\r\n            if(palo == cartaActual.getPalo() )\r\n            {\r\n                cont++;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Metodo para preparar las manos de cartas de los parametros\r\n     * @param jugador\r\n     * @param maquina\r\n     * @param mesa\r\n     */\r\n    public void inicarRonda(Jugador jugador, Maquina maquina, Mesa mesa)\r\n    {\r\n        if(baraja.size()<9) /* si es menor que 9 cartas necesarias para jugar una ronda entramos y vaciamos la baraja*/\r\n        {\r\n            while(baraja.size()!=0) /* Elimina las cartas hasta que baraja este vacia*/\r\n            {\r\n                baraja.remove(0);\r\n            }\r\n        }\r\n        gerenerarBaraja();\r\n        /*CARTAS JUGADOR*/\r\n        jugador.addCarta(repartirCarta());\r\n        jugador.addCarta(repartirCarta());\r\n\r\n        /*CARTAS MAQUINA*/\r\n        maquina.addCarta(repartirCarta());\r\n        maquina.addCarta(repartirCarta());\r\n\r\n        /*CARTAS MESA*/\r\n        for(int i = 0; i<5;i++) /*Add cinco cartas de la primera ronda*/\r\n        {\r\n            mesa.addCarta(repartirCarta());\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Metodo para ver si jugador debe hacer All In\r\n     * @param apuesta\r\n     * @param saldo\r\n     * @return\r\n     */\r\n    public boolean compararAllIn(int apuesta, int saldo)\r\n    {\r\n        if(apuesta>saldo)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Metodo repartir 1 carta\r\n     * @return\r\n     */\r\n    public Carta repartirCarta()\r\n    {\r\n        Carta carta = baraja.get(0);\r\n        baraja.remove(0);\r\n\r\n        return carta;\r\n    }\r\n    public int comprobarGanador(Jugador jugador, Maquina maquina)\r\n    {\r\n        if (jugador.getDinero() == 0)\r\n        {\r\n            return 1;\r\n        }\r\n        if(maquina.getDinero()== 0)\r\n        {\r\n            return 2;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Partida.java b/src/Partida.java
--- a/src/Partida.java	(revision dd26631217c7857e80da6b223db4d3d7cfe9829c)
+++ b/src/Partida.java	(date 1715722160921)
@@ -154,7 +154,24 @@
         return 0;
     }
 
-
+    /**
+     * Metodo que nos dice quein ha ganado
+     * @param manoJugador mano de cartas del jugador
+     * @param manoMesa mano de cartas de la mesa
+     * @param manoMaquina mano de cartas de la maquina
+     * @return >0 Si gana el jugador    <0 Si gana la Maquina   0 Si es un empate
+     */
+    public int quienGana(ArrayList<Carta> manoJugador,ArrayList<Carta> manoMesa,ArrayList<Carta> manoMaquina){
+        int valorDevolver=0; /*Es la variable que almacenara quien gana*/
+        for (int i=0;i<2&&valorDevolver==0;i++){
+            if (Mano.deterctarMano(manoJugador,manoMesa)[i]>Mano.deterctarMano(manoMaquina,manoMesa)[i]){
+                valorDevolver=1;
+            }else if (Mano.deterctarMano(manoJugador,manoMesa)[i]<Mano.deterctarMano(manoMaquina,manoMesa)[i]){
+                valorDevolver=-1;
+            }
+        }
+        return valorDevolver;
+    }
 
 
 }
Index: src/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import utilidades.Util;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\npublic class Main2 {\r\n    public static void main(String[] args) {\r\n\r\n        Scanner teclado = new Scanner(System.in);\r\n        Partida partida = new Partida(); // inicamos la partida\r\n        Mesa mesa = new Mesa(0);\r\n        Maquina maquina = new Maquina(1000000);\r\n        Jugador jugador = new Jugador(1000000);\r\n        File archivoJugador = new File(\"registroJugador.txt\");\r\n        File archivoMaquina = new File(\"registroMaquina.txt\");\r\n        try {\r\n            if (!archivoJugador.exists())\r\n                archivoJugador.createNewFile();\r\n        }\r\n        catch(IOException ex) {ex.printStackTrace();}\r\n        try {\r\n            if (!archivoMaquina.exists())\r\n                archivoMaquina.createNewFile();\r\n        }\r\n        catch(IOException ex) {ex.printStackTrace();}\r\n        Registrador registrador = new Registrador(archivoJugador, archivoMaquina);\r\n\r\n        int turno = Util.getNumber(1, 2); /*Para ver quien empieza primero, 1--> maquina 2--> Jugador*/\r\n        int ronda = 0; /*Nos sirve para contar las rondas que llevamos y cuando tenemos que desplegar el menu espcifico de contestar apuesta par ajugador*/\r\n        int opc = 0; /*Variable de opcion jugador*/\r\n        int apuestaJugador; /*variable para almacenar la apuesta */\r\n        int apuestaMaquina; /*variable para almacenar la apuesta */\r\n        boolean abandona; // para ver si el jugador abandona una ronda\r\n        boolean acabada = false; // para ver si hay un ganador\r\n        boolean allIn = false; // para detectar si se realiza un all in\r\n        boolean salir = false; // para salir del juego\r\n\r\n        System.out.println(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\");\r\n        System.out.println(\"BIENVENIDO/A AL TEXAS HOLDEM\");\r\n        System.out.println(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\");\r\n        System.out.println(\"Â¿ Estas preparado para ganar un gran fortuna ? \");\r\n\r\n\r\n        do { /*BUCLE PARA LA PARTIDA */\r\n            partida.inicarRonda(jugador,maquina,mesa);\r\n            int fase = 0 ;/* Variable para ver las fases que hay en cada Ronda, es decir 4.*/\r\n            abandona = false;\r\n            turno++;\r\n            if (turno%2==0) /*EMPIEZA JUGANDO EL JUGADOR*/\r\n            {\r\n                    ronda++;\r\n                    if (ronda > 1) {\r\n                        jugador.menuContinuar();\r\n                        opc = teclado.nextInt();\r\n                        switch (opc) {\r\n                            case 1:\r\n                                System.out.println(\"CONITNUAMOS.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                break;\r\n                            case 2:\r\n                                System.out.println(\"Has seleccionado ABANDONAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                salir = true;\r\n\r\n                                break;\r\n\r\n                            default: /*Si se equivoca mostrar mensaje de error*/\r\n                                System.out.println(\"Error, debes de introducir el numero correcto de la opcion que deseas.\");\r\n                        }\r\n                    }\r\n                    fase++;\r\n                    //############ CIEGA DE JUGADOR FASE 1 #########################################################################################################################################################################################################\r\n                    do { /*BUCLE PARA DECISION DE JUGADOR */\r\n                        apuestaJugador = 0;\r\n\r\n                        System.out.println();\r\n                        System.out.println(\"*******************************************\");\r\n                        System.out.println(\"FASE --> PREFLOP O CIEGA\");\r\n                        System.out.println(\"*******************************************\");\r\n                        System.out.println();\r\n\r\n                        jugador.decisionJugador(); /*MOSTRAMOS EL MENU*/\r\n                        opc = Util.leerOpcMenu(teclado, 5);\r\n                        switch (opc) {\r\n                            case 1:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MI MANO.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                jugador.mostrarCartasDinero();\r\n                                break;\r\n                            case 2:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MESA.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                mesa.imprimirMano(fase);\r\n                                break;\r\n\r\n                            case 3:\r\n                                System.out.println(\"Has selecionado APOSTAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = jugador.apostar(teclado); /*Al ser la primera ronda no hay opcion a realizar All IN*/\r\n                                mesa.aÃ±adirDineroApuestas(apuestaJugador); /*Ponemos en la mesa la apuesta del jugador*/\r\n                                break;\r\n                            case 4:\r\n                                System.out.println(\"Has selecionado PASAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = 0; /*Ponemos cero porque no apuesta nada*/\r\n                                break;\r\n                            case 5:\r\n                                System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                /*No pasamos dinero a la maquina porque al ser la primera fase no ha llegado a postar*/\r\n                                abandona = true;\r\n                                break;\r\n\r\n                            default: /*Si se equivoca mostrar mensaje de error*/\r\n                                System.out.println(\"Error, debes de introducir el numero correcto de la opcion que deseas.\");\r\n                        }\r\n                    }\r\n                    while (opc > 5 || opc < 3); /*Sale cuando la opcion sea 3-4-5*/\r\n                    if (!abandona) {\r\n                        //############ CONTESTA LA MAQUIINA FASE 1#############\r\n                        apuestaMaquina = maquina.obtenerCalidadMano(fase, mesa.getDinero());\r\n                        mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la apuesta de la maquina sobre la mesa\r\n\r\n                        if ((apuestaMaquina == apuestaJugador)) {\r\n                            System.out.println(\"Tu contrincante ha igualado la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n                        } else {\r\n                            System.out.println(\"Tu contrincante ha subido la apuesta hasta la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n                        }\r\n\r\n                        /*Comprobamos si la maquina a subido la apuesta */\r\n                        if (partida.compararAllIn(apuestaMaquina, jugador.getDinero())) // HAY ALL IN\r\n                        {\r\n                            jugador.decirAllIn(); // menu de decision de ALL IN\r\n                            opc = teclado.nextInt();\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has seleccionado ALL IN.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.getDinero(); /* apuesta todo su dinero*/\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                    break;\r\n\r\n                                case 2:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                                    abandona = true;\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                            }\r\n\r\n                        }\r\n                        if (apuestaJugador < apuestaMaquina) /*Maquina sube la apuesta*/ {\r\n                            jugador.contestarSubida(); /* MUESTRA MENU PARA CONTESTAR SUBIDA */\r\n                            opc = teclado.nextInt();\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has selecionado IGUALAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.igualarSubida(apuestaJugador, apuestaMaquina);\r\n\r\n                                    /*Como iguala pasamos a la siguiente ronda, dejamos las apuestas en la mesa*/\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);\r\n                                    break;\r\n\r\n                                case 2:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                                    abandona = true;\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    fase++;\r\n                    opc = 0;\r\n                    //############ FLOP DE JUGADOR FASE 2 ###############################################################################################################################################################################################\r\n                    /*BUCLE PARA DECISION DE JUGADOR*/\r\n                    if (!abandona) {\r\n                        while (opc > 5 || opc < 3) {/*No entra si la opcion es 5-4-3*/\r\n                            apuestaJugador = 0;\r\n                            System.out.println();\r\n                            System.out.println(\"*******************************************\");\r\n                            System.out.println(\"FASE --> FLOP\");\r\n                            System.out.println(\"*******************************************\");\r\n                            System.out.println();\r\n                            jugador.decisionJugador(); /*MOSTRAMOS EL MENU*/\r\n                            opc = Util.leerOpcMenu(teclado, 5);\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has seleccionado VISUALIZAR MI MANO.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    jugador.mostrarCartasDinero();\r\n                                    break;\r\n                                case 2:\r\n                                    System.out.println(\"Has seleccionado VISUALIZAR MESA.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    mesa.imprimirMano(fase);\r\n\r\n                                    break;\r\n\r\n                                case 3:\r\n                                    System.out.println(\"Has selecionado APOSTAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.apostar(teclado); /*Al ser la primera en hablar no hay opcion a realizar All IN*/\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                    break;\r\n                                case 4:\r\n                                    System.out.println(\"Has selecionado PASAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = 0; /*Ponemos cero porque no apuesta nada*/\r\n                                    break;\r\n                                case 5:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /*Como abandona pasamos el dienro en la mesa a la maquina*/\r\n                                    abandona = true;\r\n\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n                            }\r\n                        }\r\n\r\n                        //############ CONTESTA LA MAQUIINA FASE 2 #############\r\n                        apuestaMaquina = maquina.obtenerCalidadMano(fase, mesa.getDinero());\r\n                        mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la apuesta de la maquina sobre la mesa\r\n\r\n                        if (apuestaMaquina == apuestaJugador) {\r\n                            System.out.println(\"Tu contrincante ha igualado la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n                        } else {\r\n                            System.out.println(\"Tu contrincante ha subido la apuesta hasta la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n                        }\r\n\r\n                        /*Comprobamos si la maquina a subido la apuesta */\r\n                        if (partida.compararAllIn(apuestaMaquina, jugador.getDinero())) // HAY ALL IN\r\n                        {\r\n                            jugador.decirAllIn(); // menu de decision de ALL IN\r\n                            opc = teclado.nextInt();\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has seleccionado ALL IN.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.getDinero(); /* apuesta todo su dinero*/\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                    break;\r\n\r\n                                case 2:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                                    abandona = true;\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                            }\r\n\r\n                        }\r\n                        if (apuestaJugador < apuestaMaquina) /*Maquina sube la apuesta*/ {\r\n                            jugador.contestarSubida(); /* MUESTRA MENU PARA CONTESTAR SUBIDA */\r\n                            opc = teclado.nextInt();\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has selecionado IGUALAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.igualarSubida(apuestaJugador, apuestaMaquina);\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                    /*Como iguala pasamos a la siguiente ronda, dejamos las apuestas en la mesa*/\r\n\r\n\r\n                                case 2:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                                    abandona = true;\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    //############ TURN DE JUGADOR FASE 3 ###############################################################################################################################################################################################\r\n                    fase++;\r\n                    opc = 0;\r\n                    if (!abandona) {\r\n                        while (opc > 5 || opc < 3) {/*No entra si la opcion es 5-4-3*/\r\n                            apuestaJugador = 0;\r\n\r\n                            System.out.println();\r\n                            System.out.println(\"*******************************************\");\r\n                            System.out.println(\"FASE --> TURN\");\r\n                            System.out.println(\"*******************************************\");\r\n                            System.out.println();\r\n\r\n                            jugador.decisionJugador(); /*MOSTRAMOS EL MENU*/\r\n                            opc = Util.leerOpcMenu(teclado, 5);\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has seleccionado VISUALIZAR MI MANO.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    jugador.mostrarCartasDinero();\r\n                                    break;\r\n                                case 2:\r\n                                    System.out.println(\"Has seleccionado VISUALIZAR MESA.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    mesa.imprimirMano(fase);\r\n\r\n                                    break;\r\n\r\n                                case 3:\r\n                                    System.out.println(\"Has selecionado APOSTAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.apostar(teclado); /*Al ser la primera en hablar no hay opcion a realizar All IN*/\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                    break;\r\n                                case 4:\r\n                                    System.out.println(\"Has selecionado PASAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = 0; /*Ponemos cero porque no apuesta nada*/\r\n                                    break;\r\n                                case 5:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /*Como abandona pasamos el dienro en la mesa a la maquina*/\r\n                                    abandona = true;\r\n\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n                            }\r\n\r\n                        }\r\n                        //############ CONTESTA LA MAQUIINA FASE 3 #############\r\n                        apuestaMaquina = maquina.obtenerCalidadMano(fase, mesa.getDinero());\r\n                        mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la apuesta de la maquina sobre la mesa\r\n\r\n                        if (apuestaMaquina == apuestaJugador) {\r\n                            System.out.println(\"Tu contrincante ha igualado la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n                        } else {\r\n                            System.out.println(\"Tu contrincante ha subido la apuesta hasta la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n                        }\r\n\r\n                        /*Comprobamos si la maquina a subido la apuesta */\r\n                        if (partida.compararAllIn(apuestaMaquina, jugador.getDinero())) // HAY ALL IN\r\n                        {\r\n                            jugador.decirAllIn(); // menu de decision de ALL IN\r\n                            opc = teclado.nextInt();\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has seleccionado ALL IN.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.getDinero(); /* apuesta todo su dinero*/\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n\r\n\r\n                                case 2:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                                    abandona = true;\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                            }\r\n\r\n                        }\r\n                        if (apuestaJugador < apuestaMaquina) /*Maquina sube la apuesta*/ {\r\n                            jugador.contestarSubida(); /* MUESTRA MENU PARA CONTESTAR SUBIDA */\r\n                            opc = teclado.nextInt();\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has selecionado IGUALAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.igualarSubida(apuestaJugador, apuestaMaquina);\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                    /*Como iguala pasamos a la siguiente ronda, dejamos las apuestas en la mesa*/\r\n\r\n\r\n                                case 2:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                                    abandona = true;\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    //############ RIVER DE JUGADOR FASE 4 ###############################################################################################################################################################################################\r\n                    fase++;\r\n                    opc = 0;\r\n                    if (!abandona) {\r\n                        while (opc > 5 || opc < 3) {/*No entra si la opcion es 5-4-3*/\r\n                            apuestaJugador = 0;\r\n\r\n                            System.out.println();\r\n                            System.out.println(\"*******************************************\");\r\n                            System.out.println(\"FASE --> RIVER\");\r\n                            System.out.println(\"*******************************************\");\r\n                            System.out.println();\r\n\r\n                            jugador.decisionJugador(); /*MOSTRAMOS EL MENU*/\r\n                            opc = Util.leerOpcMenu(teclado, 5);\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has seleccionado VISUALIZAR MI MANO.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    jugador.mostrarCartasDinero();\r\n                                    break;\r\n                                case 2:\r\n                                    System.out.println(\"Has seleccionado VISUALIZAR MESA.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    mesa.imprimirMano(fase);\r\n\r\n                                    break;\r\n\r\n                                case 3:\r\n                                    System.out.println(\"Has selecionado APOSTAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.apostar(teclado); /*Al ser la primera en hablar no hay opcion a realizar All IN*/\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                    break;\r\n                                case 4:\r\n                                    System.out.println(\"Has selecionado PASAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = 0; /*Ponemos cero porque no apuesta nada*/\r\n                                    break;\r\n                                case 5:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /*Como abandona pasamos el dienro en la mesa a la maquina*/\r\n                                    abandona = true;\r\n\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n                            }\r\n                        }\r\n                        //############ CONTESTA LA MAQUIINA FASE 4 #############\r\n                        apuestaMaquina = maquina.obtenerCalidadMano(fase, mesa.getDinero());\r\n                        mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la apuesta de la maquina sobre la mesa\r\n\r\n                        if (apuestaMaquina == apuestaJugador) {\r\n                            System.out.println(\"Tu contrincante ha igualado la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n                        } else {\r\n                            System.out.println(\"Tu contrincante ha subido la apuesta hasta la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n                        }\r\n\r\n                        /*Comprobamos si la maquina a subido la apuesta */\r\n                        if (partida.compararAllIn(apuestaMaquina, jugador.getDinero())) // HAY ALL IN\r\n                        {\r\n                            jugador.decirAllIn(); // menu de decision de ALL IN\r\n                            opc = teclado.nextInt();\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has seleccionado ALL IN.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.getDinero(); /* apuesta todo su dinero*/\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                    break;\r\n\r\n                                case 2:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                                    abandona = true;\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                            }\r\n\r\n                        }\r\n                        if (apuestaJugador < apuestaMaquina) /*Maquina sube la apuesta*/ {\r\n                            jugador.contestarSubida(); /* MUESTRA MENU PARA CONTESTAR SUBIDA */\r\n                            opc = teclado.nextInt();\r\n                            switch (opc) {\r\n                                case 1:\r\n                                    System.out.println(\"Has selecionado IGUALAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    apuestaJugador = jugador.igualarSubida(apuestaJugador, apuestaMaquina);\r\n                                    mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                    /*Como iguala pasamos a la siguiente ronda, dejamos las apuestas en la mesa*/\r\n\r\n\r\n                                case 2:\r\n                                    System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                    System.out.println(\"-------------------------------------------\");\r\n                                    maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                                    abandona = true;\r\n                                    break;\r\n\r\n                                default: /*Si se equivoca mostrar mensaje de error*/\r\n                                    System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                            }\r\n                        }\r\n                        if (partida.comprobarGanador(jugador, maquina) != 0) {\r\n                            acabada = true;\r\n                        }\r\n                    }\r\n                    fase++;\r\n            }\r\n            else  /* RONDA CUANDO EMPIEZA LA MAQUINA*/\r\n            {\r\n                ronda++;\r\n                if(ronda > 1 ){\r\n                    jugador.menuContinuar();\r\n                    opc = teclado.nextInt();\r\n                    switch(opc)\r\n                    {\r\n                        case 1:\r\n                            System.out.println(\"CONITNUAMOS.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            break;\r\n                        case 2:\r\n                            System.out.println(\"Has seleccionado ABANDONAR.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            salir = true;\r\n\r\n                            break;\r\n\r\n                        default: /*Si se equivoca mostrar mensaje de error*/\r\n                            System.out.println(\"Error, debes de introducir el numero correcto de la opcion que deseas.\");\r\n                    }\r\n                }\r\n                //############ CIEGA DE MAQUINA FASE 1 #########################################################################################################################################################################################################\r\n                fase++;\r\n                apuestaJugador = 0;\r\n\r\n                System.out.println();\r\n                System.out.println(\"*******************************************\");\r\n                System.out.println(\"FASE --> PREFLOP O CIEGA\");\r\n                System.out.println(\"*******************************************\");\r\n                System.out.println();\r\n\r\n                apuestaMaquina = maquina.obtenerCalidadMano(fase,mesa.getDinero());\r\n                mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la apuesta de la maquina sobre la mesa\r\n\r\n                System.out.println(\"Tu contrincante ha apostado la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n\r\n\r\n                //############ CONTESTA LA JUGADOR FASE 1 #############\r\n\r\n                /*Comprobamos si hay All In */\r\n                if(partida.compararAllIn(apuestaMaquina,jugador.getDinero())) // HAY ALL IN\r\n                {\r\n                    jugador.decirAllIn(); // menu de decision de ALL IN\r\n                    opc = teclado.nextInt();\r\n                    switch (opc){\r\n                        case 1:\r\n                            System.out.println(\"Has seleccionado ALL IN.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            apuestaJugador = jugador.getDinero(); /* apuesta todo su dinero*/\r\n                            mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                            break;\r\n\r\n                        case 2:\r\n                            System.out.println(\"Has selecionado ABANDONAR.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                            abandona = true;\r\n                            break;\r\n\r\n                        default: /*Si se equivoca mostrar mensaje de error*/\r\n                            System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                    }\r\n\r\n                }\r\n                else { /*NO HAY ALL IN*/\r\n                    do { /*BUCLE PARA DECISION DE JUGADOR */\r\n\r\n\r\n                        jugador.contesteaJugador();/*MOSTRAMOS EL MENU*/\r\n                        opc = Util.leerOpcMenu(teclado, 5);\r\n                        switch (opc) {\r\n                            case 1:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MI MANO.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                jugador.mostrarCartasDinero();\r\n                                break;\r\n                            case 2:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MESA.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                mesa.imprimirMano(fase);\r\n                                break;\r\n\r\n                            case 3:\r\n                                System.out.println(\"Has selecionado IGUALAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = jugador.igualar(apuestaMaquina); /*Al ser la primera ronda no hay opcion a realizar All IN*/\r\n                                mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                break;\r\n                            case 4:\r\n                                System.out.println(\"Has selecionado SUBIR .\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = jugador.apostar(teclado); /*Al ser la primera en hablar no hay opcion a realizar All IN*/\r\n                                mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                break;\r\n                            case 5:\r\n                                System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                /*No pasamos dinero a la maquina porque al ser la primera fase no ha llegado a postar*/\r\n                                abandona = true;\r\n\r\n                                break;\r\n\r\n                            default: /*Si se equivoca mostrar mensaje de error*/\r\n                                System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n                        }\r\n\r\n                    }\r\n                    while (opc > 5 || opc < 3); /*Sale cuando la opcion sea 3-4-5*/\r\n\r\n                    /*Comprobamos si el JUGADOR a subido la apuesta */\r\n                    if(partida.compararAllIn(apuestaJugador,maquina.getDinero())) // HAY ALL IN\r\n                    {\r\n                        apuestaMaquina = maquina.getDinero(); // apostamos todo lo que le queda\r\n                        mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la pauesta en la mesa\r\n                        System.out.println(\"Tu contrincante ha apostado ALL IN--> [ \" + apuestaMaquina + \" ]\");\r\n                        allIn = true;\r\n\r\n                    }\r\n                    if(apuestaMaquina<apuestaJugador) /*JUGADOR sube la apuesta*/ {\r\n                        {\r\n                            apuestaMaquina=maquina.igualarSubida(apuestaJugador,apuestaMaquina);\r\n                            mesa.aÃ±adirDineroApuestas(apuestaMaquina);\r\n                            System.out.println(\"Tu contrincante iguala tu apuesta --> [ \" + apuestaMaquina + \" ]\");\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //############ FLOP DE MAQUINA FASE 2 #########################################################################################################################################################################################################\r\n                fase++;\r\n                apuestaJugador =0;\r\n\r\n                System.out.println();\r\n                System.out.println(\"*******************************************\");\r\n                System.out.println(\"FASE --> FLOP\");\r\n                System.out.println(\"*******************************************\");\r\n                System.out.println();\r\n\r\n                apuestaMaquina = maquina.obtenerCalidadMano(fase,mesa.getDinero());\r\n                mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la apuesta de la maquina sobre la mesa\r\n                System.out.println(\"Tu contrincante ha apostado la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n\r\n                //############ CONTESTA LA JUGADOR FASE 2 #############\r\n                /*Comprobamos si hay All In */\r\n                if(partida.compararAllIn(apuestaMaquina,jugador.getDinero())) // HAY ALL IN\r\n                {\r\n                    jugador.decirAllIn(); // menu de decision de ALL IN\r\n                    opc = teclado.nextInt();\r\n                    switch (opc){\r\n                        case 1:\r\n                            System.out.println(\"Has seleccionado ALL IN.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            apuestaJugador = jugador.getDinero(); /* apuesta todo su dinero*/\r\n                            mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                            break;\r\n\r\n                        case 2:\r\n                            System.out.println(\"Has selecionado ABANDONAR.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                            abandona = true;\r\n                            break;\r\n\r\n                        default: /*Si se equivoca mostrar mensaje de error*/\r\n                            System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                    }\r\n\r\n                }\r\n                else { /*NO HAY ALL IN*/\r\n                    do { /*BUCLE PARA DECISION DE JUGADOR */\r\n\r\n                        jugador.contesteaJugador();/*MOSTRAMOS EL MENU*/\r\n                        opc = Util.leerOpcMenu(teclado, 5);\r\n                        switch (opc) {\r\n                            case 1:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MI MANO.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                jugador.mostrarCartasDinero();\r\n                                break;\r\n                            case 2:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MESA.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                mesa.imprimirMano(fase);\r\n                                break;\r\n\r\n                            case 3:\r\n                                System.out.println(\"Has selecionado IGUALAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = jugador.igualar(apuestaMaquina); /*Al ser la primera ronda no hay opcion a realizar All IN*/\r\n                                mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                break;\r\n                            case 4:\r\n                                System.out.println(\"Has selecionado SUBIR .\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = jugador.apostar(teclado); /*Al ser la primera en hablar no hay opcion a realizar All IN*/\r\n                                mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                break;\r\n                            case 5:\r\n                                System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                /*No pasamos dinero a la maquina porque al ser la primera fase no ha llegado a postar*/\r\n                                abandona = true;\r\n\r\n                                break;\r\n\r\n                            default: /*Si se equivoca mostrar mensaje de error*/\r\n                                System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n                        }\r\n\r\n                    }\r\n                    while (opc > 5 || opc < 3); /*Sale cuando la opcion sea 3-4-5*/\r\n                }\r\n\r\n                /*Comprobamos si el JUGADOR a subido la apuesta */\r\n                if(partida.compararAllIn(apuestaJugador,maquina.getDinero())) // HAY ALL IN\r\n                {\r\n                    apuestaMaquina = maquina.getDinero(); // apostamos todo lo que le queda\r\n                    mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la pauesta en la mesa\r\n                    System.out.println(\"Tu contrincante ha apostado ALLIN --> [ \" + apuestaMaquina + \" ]\");\r\n                    allIn = true;\r\n\r\n                }\r\n                if(apuestaMaquina<apuestaJugador) /*JUGADOR sube la apuesta*/ {\r\n                    {\r\n                        apuestaMaquina=maquina.igualarSubida(apuestaJugador,apuestaMaquina);\r\n                        mesa.aÃ±adirDineroApuestas(apuestaMaquina);\r\n                        System.out.println(\"Tu contrincante iguala tu apuesta --> [ \" + apuestaMaquina + \" ]\");\r\n\r\n                    }\r\n                }\r\n\r\n                //############ TURN DE MAQUINA FASE 3 #########################################################################################################################################################################################################\r\n                fase++;\r\n                apuestaJugador =0;\r\n\r\n                System.out.println();\r\n                System.out.println(\"*******************************************\");\r\n                System.out.println(\"FASE --> TURN\");\r\n                System.out.println(\"*******************************************\");\r\n                System.out.println();\r\n\r\n                apuestaMaquina = maquina.obtenerCalidadMano(fase,mesa.getDinero());\r\n                mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la apuesta de la maquina sobre la mesa\r\n                System.out.println(\"Tu contrincante ha apostado la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n\r\n                //############ CONTESTA LA JUGADOR FASE 3 #############\r\n                /*Comprobamos si hay All In */\r\n                if(partida.compararAllIn(apuestaMaquina,jugador.getDinero())) // HAY ALL IN\r\n                {\r\n                    jugador.decirAllIn(); // menu de decision de ALL IN\r\n                    opc = teclado.nextInt();\r\n                    switch (opc){\r\n                        case 1:\r\n                            System.out.println(\"Has seleccionado ALL IN.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            apuestaJugador = jugador.getDinero(); /* apuesta todo su dinero*/\r\n                            mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                            break;\r\n\r\n                        case 2:\r\n                            System.out.println(\"Has selecionado ABANDONAR.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                            abandona = true;\r\n                            break;\r\n\r\n                        default: /*Si se equivoca mostrar mensaje de error*/\r\n                            System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                    }\r\n\r\n                }\r\n                else { /*NO HAY ALL IN*/\r\n                    do { /*BUCLE PARA DECISION DE JUGADOR */\r\n\r\n                        jugador.contesteaJugador();/*MOSTRAMOS EL MENU*/\r\n                        opc = Util.leerOpcMenu(teclado, 5);\r\n                        switch (opc) {\r\n                            case 1:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MI MANO.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                jugador.mostrarCartasDinero();\r\n                                break;\r\n                            case 2:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MESA.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                mesa.imprimirMano(fase);\r\n                                break;\r\n\r\n                            case 3:\r\n                                System.out.println(\"Has selecionado IGUALAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = jugador.igualar(apuestaMaquina); /*Al ser la primera ronda no hay opcion a realizar All IN*/\r\n                                mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                break;\r\n                            case 4:\r\n                                System.out.println(\"Has selecionado SUBIR .\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = jugador.apostar(teclado); /*Al ser la primera en hablar no hay opcion a realizar All IN*/\r\n                                mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                break;\r\n                            case 5:\r\n                                System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                /*No pasamos dinero a la maquina porque al ser la primera fase no ha llegado a postar*/\r\n                                abandona = true;\r\n\r\n                                break;\r\n\r\n                            default: /*Si se equivoca mostrar mensaje de error*/\r\n                                System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n                        }\r\n\r\n                    }\r\n                    while (opc > 5 || opc < 3); /*Sale cuando la opcion sea 3-4-5*/\r\n                }\r\n\r\n                /*Comprobamos si el JUGADOR a subido la apuesta */\r\n                if(partida.compararAllIn(apuestaJugador,maquina.getDinero())) // HAY ALL IN\r\n                {\r\n                    apuestaMaquina = maquina.getDinero(); // apostamos todo lo que le queda\r\n                    mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la pauesta en la mesa\r\n                    System.out.println(\"Tu contrincante ha apostado ALL IN --> [ \" + apuestaMaquina + \" ]\");\r\n                    allIn = true;\r\n\r\n                }\r\n                if(apuestaMaquina<apuestaJugador) /*JUGADOR sube la apuesta*/ {\r\n                    {\r\n                        apuestaMaquina=maquina.igualarSubida(apuestaJugador,apuestaMaquina);\r\n                        mesa.aÃ±adirDineroApuestas(apuestaMaquina);\r\n                        System.out.println(\"Tu contrincante ha igualado tu apuesta --> [ \" + apuestaMaquina + \" ]\");\r\n\r\n                    }\r\n                }\r\n\r\n                //############ RIVER DE MAQUINA FASE 4 #########################################################################################################################################################################################################\r\n                fase++;\r\n                apuestaJugador =0;\r\n\r\n                System.out.println();\r\n                System.out.println(\"*******************************************\");\r\n                System.out.println(\"FASE --> RIVER\");\r\n                System.out.println(\"*******************************************\");\r\n                System.out.println();\r\n\r\n                apuestaMaquina = maquina.obtenerCalidadMano(fase,mesa.getDinero());\r\n                mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la apuesta de la maquina sobre la mesa\r\n                System.out.println(\"Tu contrincante ha apostado la siguiente cantidad --> [ \" + apuestaMaquina + \" ]\");\r\n\r\n                //############ CONTESTA LA JUGADOR FASE 4 #############\r\n                /*Comprobamos si hay All In */\r\n                if(partida.compararAllIn(apuestaMaquina,jugador.getDinero())) // HAY ALL IN\r\n                {\r\n                    jugador.decirAllIn(); // menu de decision de ALL IN\r\n                    opc = teclado.nextInt();\r\n                    switch (opc){\r\n                        case 1:\r\n                            System.out.println(\"Has seleccionado ALL IN.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            apuestaJugador = jugador.getDinero(); /* apuesta todo su dinero*/\r\n                            mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                            break;\r\n\r\n                        case 2:\r\n                            System.out.println(\"Has selecionado ABANDONAR.\");\r\n                            System.out.println(\"-------------------------------------------\");\r\n                            maquina.addDinero(mesa.getDinero()); /* Le damos el dinero de la mesa a la maquina*/\r\n                            abandona = true;\r\n                            break;\r\n\r\n                        default: /*Si se equivoca mostrar mensaje de error*/\r\n                            System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n\r\n                    }\r\n\r\n                }\r\n                else { /*NO HAY ALL IN*/\r\n                    do { /*BUCLE PARA DECISION DE JUGADOR */\r\n\r\n                        jugador.contesteaJugador();/*MOSTRAMOS EL MENU*/\r\n                        opc = Util.leerOpcMenu(teclado, 5);\r\n                        switch (opc) {\r\n                            case 1:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MI MANO.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                jugador.mostrarCartasDinero();\r\n                                break;\r\n                            case 2:\r\n                                System.out.println(\"Has seleccionado VISUALIZAR MESA.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                mesa.imprimirMano(fase);\r\n                                break;\r\n\r\n                            case 3:\r\n                                System.out.println(\"Has selecionado IGUALAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = jugador.igualar(apuestaMaquina); /*Al ser la primera ronda no hay opcion a realizar All IN*/\r\n                                mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                break;\r\n                            case 4:\r\n                                System.out.println(\"Has selecionado SUBIR .\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                apuestaJugador = jugador.apostar(teclado); /*Al ser la primera en hablar no hay opcion a realizar All IN*/\r\n                                mesa.aÃ±adirDineroApuestas(apuestaJugador);/* Ponemos el dinero en la mesa*/\r\n                                break;\r\n                            case 5:\r\n                                System.out.println(\"Has selecionado ABANDONAR.\");\r\n                                System.out.println(\"-------------------------------------------\");\r\n                                /*No pasamos dinero a la maquina porque al ser la primera fase no ha llegado a postar*/\r\n                                abandona = true;\r\n\r\n                                break;\r\n\r\n                            default: /*Si se equivoca mostrar mensaje de error*/\r\n                                System.out.println(\"Error, debes de introudir el numero correcto de la opcion que deseas.\");\r\n                        }\r\n\r\n                    }\r\n                    while (opc > 5 || opc < 3); /*Sale cuando la opcion sea 3-4-5*/\r\n                }\r\n\r\n                /*Comprobamos si el JUGADOR a subido la apuesta */\r\n                if(partida.compararAllIn(apuestaJugador,maquina.getDinero())) // HAY ALL IN\r\n                {\r\n                    apuestaMaquina = maquina.getDinero(); // apostamos todo lo que le queda\r\n                    mesa.aÃ±adirDineroApuestas(apuestaMaquina); // ponemos la pauesta en la mesa\r\n                    System.out.println(\"Tu contrincante ha apostado  AllIN --> [ \" + apuestaMaquina + \" ]\");\r\n                    allIn = true;\r\n\r\n                }\r\n                if(apuestaMaquina<apuestaJugador) /*JUGADOR sube la apuesta*/ {\r\n                    {\r\n                        apuestaMaquina=maquina.igualarSubida(apuestaJugador,apuestaMaquina);\r\n                        mesa.aÃ±adirDineroApuestas(apuestaMaquina);\r\n                        System.out.println(\"Tu contrincante ha igualado tu apuesta --> [ \" + apuestaMaquina + \" ]\");\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n        while (!acabada||!salir);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main2.java b/src/Main2.java
--- a/src/Main2.java	(revision dd26631217c7857e80da6b223db4d3d7cfe9829c)
+++ b/src/Main2.java	(date 1715722160970)
@@ -45,7 +45,6 @@
             partida.inicarRonda(jugador,maquina,mesa);
             int fase = 0 ;/* Variable para ver las fases que hay en cada Ronda, es decir 4.*/
             abandona = false;
-            turno++;
             if (turno%2==0) /*EMPIEZA JUGANDO EL JUGADOR*/
             {
                     ronda++;
@@ -519,7 +518,6 @@
                             acabada = true;
                         }
                     }
-                    fase++;
             }
             else  /* RONDA CUANDO EMPIEZA LA MAQUINA*/
             {
@@ -964,8 +962,10 @@
                 }
 
             }
-
-
+            if (partida.quienGana(jugador.getMano(),mesa.getMano(),maquina.getMano())>0) {
+                System.out.println("Enhorabuena has ganado: "+mesa.getDinero());
+                jugador.
+            }
         }
         while (!acabada||!salir);
     }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27__Changes_.xml	(revision dd26631217c7857e80da6b223db4d3d7cfe9829c)
+++ /dev/null	(revision dd26631217c7857e80da6b223db4d3d7cfe9829c)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_30_04_2024_13_27_[Changes]" date="1714476454535" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 30/04/2024 13:27 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22__Changes_.xml	(revision dd26631217c7857e80da6b223db4d3d7cfe9829c)
+++ /dev/null	(revision dd26631217c7857e80da6b223db4d3d7cfe9829c)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_05_05_2024_10_22_[Changes]" date="1714897356434" recycled="false" toDelete="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 05/05/2024 10:22 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3d683796-464c-42a3-9423-713b6724548b\" name=\"Changes\" comment=\"AÃ±ade maquina y mano correguidos por Nacho\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Main2.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Main2.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\r\n      <list>\r\n        <option value=\"Ignacio Pezuela &lt;i.pezuelatrabajo@gmail.com&gt;\" />\r\n      </list>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2dgJiccXZgkhT3jhm53c7PXH62B\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Acer i5/Desktop/IntelliJ-WD/PokerMaquina&quot;,\r\n    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/Alex/IdeaProjects/Proyecto Poker/src/Main.java&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"Application.Main2\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"Proyecto Poker\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main2\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main2\" />\r\n      <module name=\"Proyecto Poker\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main2\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3d683796-464c-42a3-9423-713b6724548b\" name=\"Changes\" comment=\"\" />\r\n      <created>1710423918461</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1710423918461</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"AÃ±ade maquina y mano correguidos\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1714897451739</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1714897451739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"AÃ±ade maquina y mano correguidos por Nacho\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1714898235663</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1714898235663</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"AÃ±ade maquina y mano correguidos\" />\r\n    <MESSAGE value=\"AÃ±ade maquina y mano correguidos por Nacho\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"AÃ±ade maquina y mano correguidos por Nacho\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.lang.NullPointerException\" package=\"java.lang\" />\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/Main2.java</url>\r\n          <line>110</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision dd26631217c7857e80da6b223db4d3d7cfe9829c)
+++ b/.idea/workspace.xml	(date 1715245745510)
@@ -5,9 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="3d683796-464c-42a3-9423-713b6724548b" name="Changes" comment="AÃ±ade maquina y mano correguidos por Nacho">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_2024_10_22__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_30_04_2024_13_27__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Main2.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main2.java" afterDir="false" />
     </list>
