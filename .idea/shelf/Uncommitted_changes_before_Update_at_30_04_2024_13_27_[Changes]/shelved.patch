Index: src/Jugador.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import utilidades.Util;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Jugador {\r\n    protected ArrayList <Carta> mano;\r\n    protected int dinero;\r\n\r\n    public Jugador( int dinero) {\r\n        this.mano = new ArrayList<Carta>();\r\n        this.dinero = dinero;\r\n    }\r\n    /**\r\n     * Metodo para añadir carta\r\n     * @param carta carta de la baraja añadir mano maquina\r\n     * @return true: se ha podido añadir\r\n     */\r\n    public boolean addCarta(Carta carta) {\r\n        mano.add(carta);\r\n        return true;\r\n    }\r\n    /**\r\n     * Metodo para vaciar la mano de la maquina\r\n     */\r\n    public void cleanMano(){\r\n        for (int i=0;i<2;i++){\r\n            mano.remove(0);\r\n        }\r\n    }\r\n\r\n    public void menuContinuar()\r\n    {\r\n        System.out.println();\r\n        System.out.println(\"MENU OPCIONES\");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"1--> CONTINUAR JUGANDO\");\r\n        System.out.println(\"2--> FINALIZAR EL JUEGO \");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"Introduce el numero de la opcion deseada:\");\r\n\r\n    }\r\n    public void decisionJugador()\r\n    {\r\n        System.out.println();\r\n        System.out.println(\"MENU OPCIONES\");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"1--> VISUALIZAR MI MANO.\");\r\n        System.out.println(\"2--> VISUALIZAR MESA.\");\r\n        System.out.println(\"3--> APOSTAR.\");\r\n        System.out.println(\"4--> PASAR\");\r\n        System.out.println(\"5--> ABANDONAR.\");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"Introduce el numero de la opcion deseada:\");\r\n\r\n\r\n    }\r\n    public void contesteaJugador()\r\n    {\r\n        System.out.println();\r\n        System.out.println(\"MENU OPCIONES\");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"1--> VISUALIZAR MI MANO.\");\r\n        System.out.println(\"2--> VISUALIZAR MESA.\");\r\n        System.out.println(\"3--> IGUALAR.\");\r\n        System.out.println(\"4--> SUBIR\");\r\n        System.out.println(\"5--> ABANDONAR.\");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"Introduce el numero de la opcion deseada:\");\r\n    }\r\n    public void contestarSubida(){\r\n        System.out.println();\r\n        System.out.println(\"MENU OPCIONES\");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"1--> IGUALAR\");\r\n        System.out.println(\"2--> ABANDONAR.\");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"Introduce el numero de la opcion deseada:\");\r\n    }\r\n    public void decirAllIn()\r\n    {\r\n        System.out.println();\r\n        System.out.println(\"No tienes saldo suficiente para igualar la apuesta. Estas son tus opciones:\");\r\n        System.out.println(\"MENU OPCIONES\");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"1--> ALL IN\");\r\n        System.out.println(\"2--> ABANDONAR.\");\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"Introduce el numero de la opcion deseada:\");\r\n    }\r\n\r\n    public void mostrarCartasDinero(){\r\n        System.out.println();\r\n        System.out.println(\"===========================================\");\r\n        System.out.println(\"TUS CARTAS SON LAS SIGUIENTES\");\r\n        for(int i = 0; i< mano.size();i++)\r\n        {\r\n            Carta cartaActual = mano.get(i);\r\n            cartaActual.imprimir();\r\n        }\r\n        System.out.println(\"DINERO ACTUAL --> \"+ getDinero());\r\n    }\r\n\r\n    /**\r\n     * Metodo apostar, si hay que hacer AllIn da solo dos opciones o le deja apostar segun su saldo\r\n     * @param teclado\r\n     * @return\r\n     */\r\n    public int apostar(Scanner teclado)\r\n    {\r\n        int apuesta = Util.leerCantidad( teclado,getDinero());\r\n        setDinero(getDinero()-apuesta); /*Restamos la cantidad apostada*/\r\n        return apuesta;\r\n    }\r\n\r\n    /**\r\n     * Metodo para calcular la diferencia de una subida e igualar esa subida\r\n     * @param apuestaJugador\r\n     * @param apuestaMaquina\r\n     * @return\r\n     */\r\n    public int igualarSubida(int apuestaJugador, int apuestaMaquina)\r\n    {\r\n        int igualar = apuestaMaquina - apuestaJugador; /*Calculamos la cantidad que debe igualar*/\r\n        setDinero(getDinero() - igualar); /*Restamos la cantidad*/\r\n        return apuestaMaquina; /*Ya que es la apuesta que se ha igualado*/\r\n    }\r\n\r\n    /**\r\n     * Metodo para igualar la apuesta de la maquina\r\n     * @param apuestaMaquina\r\n     * @return\r\n     */\r\n    public int igualar (int apuestaMaquina)\r\n    {\r\n        setDinero(getDinero()-apuestaMaquina);\r\n        return apuestaMaquina;\r\n    }\r\n    public ArrayList<Carta> getMano() {\r\n        return mano;\r\n    }\r\n\r\n    public void setMano(ArrayList<Carta> mano) {\r\n        this.mano = mano;\r\n    }\r\n\r\n    public int getDinero() {\r\n        return dinero;\r\n    }\r\n\r\n    public void setDinero(int dinero) {\r\n        this.dinero = dinero;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Jugador.java b/src/Jugador.java
--- a/src/Jugador.java	(revision 1851d8381b9cf8c28f9567c686416c1423e5a981)
+++ b/src/Jugador.java	(date 1714476407442)
@@ -5,6 +5,7 @@
 
 public class Jugador {
     protected ArrayList <Carta> mano;
+
     protected int dinero;
 
     public Jugador( int dinero) {
Index: src/Mano.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\n\r\npublic class Mano {\r\n    public static int[] deterctarMano(ArrayList<Carta> mano, ArrayList<Carta> manoMesa){\r\n        int[]valorMano= {0,0};\r\n        if (detectarEscaleraColor(mano, manoMesa)>0){\r\n            valorMano[0]=8;\r\n            valorMano[1]=detectarEscaleraColor(mano, manoMesa);\r\n            return valorMano;\r\n        }\r\n        if (detectarCartasIguales(mano, manoMesa,4)>0){\r\n            valorMano[0]=7;\r\n            valorMano[1]=detectarCartasIguales(mano, manoMesa,4);\r\n            return valorMano;\r\n        }\r\n        if (detectarFull(mano, manoMesa)>0){\r\n            valorMano[0]=6;\r\n            valorMano[1]=detectarFull(mano, manoMesa);\r\n            return valorMano;\r\n        }\r\n        if (detectarColor(mano, manoMesa)>0){\r\n            valorMano[0]=5;\r\n            valorMano[1]=detectarColor(mano, manoMesa);\r\n            return valorMano;\r\n        }\r\n        if (detectarEscalera(mano, manoMesa)>0){\r\n            valorMano[0]=4;\r\n            valorMano[1]=detectarEscalera(mano, manoMesa);\r\n            return valorMano;\r\n        }\r\n        if (detectarCartasIguales(mano, manoMesa,3)>0){\r\n            valorMano[0]=3;\r\n            valorMano[1]=detectarCartasIguales(mano, manoMesa,3);\r\n            return valorMano;\r\n        }\r\n        if (detectarDoblePereja(mano, manoMesa)>0){\r\n            valorMano[0]=2;\r\n            valorMano[1]=detectarDoblePereja(mano, manoMesa);\r\n            return valorMano;\r\n        }\r\n        if (detectarCartasIguales(mano, manoMesa,2)>0){\r\n            valorMano[0]=1;\r\n            valorMano[1]=detectarCartasIguales(mano, manoMesa,2);\r\n            return valorMano;\r\n        }\r\n        valorMano[1]=cartaAlta(mano, manoMesa);\r\n        return valorMano;\r\n    }\r\n\r\n\r\n\r\n\r\n    private static int detectarEscalera(ArrayList<Carta> mano,ArrayList<Carta> manoMesa) {\r\n        int[] cartas = new int[manoMesa.size() + mano.size()]; /*Guardar valores de las cartas de la mano y de la mesa*/\r\n        /*Llenamos la array*/\r\n        boolean repetido= false;\r\n        for (int i = 0; i < mano.size(); i++) {\r\n            cartas[i] = mano.get(i).getNumero(); // insertamos cada carta de la mano en el array\r\n        }\r\n        for (int i = mano.size(); i < manoMesa.size() + mano.size(); i++) {\r\n            repetido=false;\r\n            for (int j=0;j<cartas.length;j++){\r\n                if (manoMesa.get(i-mano.size()).getNumero() == cartas[j]) {\r\n                    repetido=true;\r\n                }\r\n            }\r\n            if(!repetido){\r\n                cartas[i] = manoMesa.get(i - mano.size()).getNumero(); // insertamos cada carta de la messa en el array acontinuacion de las de la mesa\r\n            }\r\n        }\r\n        int valorEscalera = 0;\r\n        /*Ordenamos la Array*/\r\n        Arrays.sort(cartas);/*Ordena de forma ascendente*//*@Override*/\r\n        /*Comprobamos que hay escalera*/\r\n        for (int i = 0; i < cartas.length - 4; i++){     /*Ej: 3,4,5,6,7*/\r\n            if (cartas[i + 1] == cartas[i] + 1 &&        /* 4 == 3+1 */\r\n                    cartas[i + 2] == cartas[i]+ 2 &&     /* 5 == 3+2 */\r\n                    cartas[i + 3] == cartas[i] + 3 &&    /* 6 == 3+3 */\r\n                    cartas[i + 4] == cartas[i] + 4) {    /* 7 == 3+4 */\r\n                valorEscalera = cartas[i + 4];\r\n            }\r\n        }\r\n        return valorEscalera;\r\n    }\r\n\r\n\r\n    private static int detectarColor(ArrayList<Carta> mano,ArrayList<Carta> manoMesa){\r\n        int contadorColor;\r\n        if(mano.get(0).getPalo()==mano.get(1).getPalo()){ /*Comprobamos que las cartas de las manos sean iguales */\r\n            /*Si son iguales vuscamos otras tres cartas del mismo color en la mesa*/\r\n            contadorColor=2;\r\n            for (int i=0;i<manoMesa.size()&&contadorColor<5;i++){/*Cuando hemos encontrado 5 cartas salimos del bucle*/\r\n                if (manoMesa.get(i).getPalo() == mano.get(0).getPalo()) {\r\n                    contadorColor++;\r\n                }\r\n            }\r\n            return (contadorColor==5)?cartaAlta(mano,manoMesa):0; /*Con este if devolvemos 0 si no se han encontrado las 3 cartas o el valor de la carta ams alta de la mano*/\r\n        }else{\r\n            /*Si las cartas de la mano son diferentes cogemos la primera carta y buscamos las 4 que nos faltan y si no se han encontrado buscamos con la siguiente carta*/\r\n            contadorColor=1;\r\n            int contadorVueltas=0;/*Con tesa variable sabemos cuando hemos salido del bucle para saber que cartas sde la mesa hemos utilizado para averiguar el color*/\r\n            for (int i = 0; i <mano.size()&&contadorColor<5; i++) {\r\n                contadorVueltas++;\r\n                contadorColor=1;\r\n                for (int j = 0; j < manoMesa.size(); j++) {\r\n                    if (manoMesa.get(j).getPalo() == mano.get(i).getPalo()) {\r\n                        contadorColor++;\r\n                    }\r\n                }\r\n            }\r\n            return (contadorColor==5)?mano.get(contadorVueltas-1).getNumero():0;\r\n        }\r\n    }\r\n    private static int cartaAlta(ArrayList<Carta> mano,ArrayList<Carta> manoMesa){return Math.max(mano.get(0).getNumero(), mano.get(1).getNumero()); /*Con math sacamos la carta de mayor valor de la mano*/}\r\n    private static int detectarEscaleraColor(ArrayList<Carta> mano,ArrayList<Carta> manoMesa){\r\n        int[] cartas = new int[manoMesa.size() + mano.size()]; /*Guardar valores de las cartas de la mano y de la mesa*/\r\n        /*Llenamos la array*/\r\n        boolean repetido= false;\r\n        for (int i = 0; i < mano.size(); i++) {\r\n            cartas[i] = mano.get(i).getNumero(); // insertamos cada carta de la mano en el array\r\n        }\r\n        for (int i = mano.size(); i < manoMesa.size() + mano.size(); i++) {\r\n            repetido=false;\r\n            /*Como ahora solo nos importa el numero de la carta si hay alguna repetida no se introduce en la array*/\r\n            for (int j=0;j<cartas.length;j++){\r\n                if (manoMesa.get(i-mano.size()).getNumero() == cartas[j]) {\r\n                    repetido=true;\r\n                }\r\n            }\r\n            if(!repetido){\r\n                cartas[i] = manoMesa.get(i - mano.size()).getNumero(); // insertamos cada carta de la mesa en el array acontinuacion de las de la mesa\r\n            }\r\n        }\r\n        int valorEscalera = 0;\r\n        /*Ordenamos la Array*/\r\n        Arrays.sort(cartas);/*Ordena de forma ascendente*//*@Override*/\r\n        /*Comprobamos que hay escalera*/\r\n        for (int i = 0; i < cartas.length - 4; i++){     /*Ej: 3,4,5,6,7*/\r\n            if (cartas[i + 1] == cartas[i] + 1 &&        /* 4 == 3+1 */\r\n                    cartas[i + 2] == cartas[i]+ 2 &&     /* 5 == 3+2 */\r\n                    cartas[i + 3] == cartas[i] + 3 &&    /* 6 == 3+3 */\r\n                    cartas[i + 4] == cartas[i] + 4) {\r\n                Palo paloEscalera=Palo.DIAMANTES; /*Creamos una variable que nos guada el palo de la escalera*/\r\n                for (int g=i;g<cartas.length;g++){ /*i es la primera carta de la escalera e igualamos a g para poder buscar en la array de cartas*/\r\n                    for (int k = 0; k < mano.size(); k++) { /*Buscamos tanbien en la array de la mano*/\r\n                        if (cartas[g]==mano.get(k).getNumero()){ /*Si los numeros coinciden es que es la misma carta y guardamos en la variable paloEscalera dicho palo*/\r\n                            paloEscalera=mano.get(k).getPalo();\r\n                        }\r\n                    }\r\n                }\r\n                int contador=0;\r\n                for (int j=i;j<i+5;j++){ /*LO iniciamos a i y lo terminamos en 5 numeros mayores paar estar en el rango de la Escalera*/\r\n                    /*COn estos dos bucles buscamos el color, si lo enocntramos sumamos uno al contador y si este llega a 5 salimos y se habra detectado la escalera de color*/\r\n                    for (int k = 0; k < mano.size(); k++) {\r\n                        if (cartas[j]==mano.get(k).getNumero()&&mano.get(k).getPalo()==paloEscalera){\r\n                            contador++;\r\n                        }\r\n                    }\r\n                    for (int k=0;k<manoMesa.size();k++){\r\n                        if (manoMesa.get(k).getNumero()==cartas[j]&&manoMesa.get(k).getPalo()==paloEscalera) {\r\n                            contador++;\r\n                        }\r\n                    }\r\n                }\r\n                if (contador==5)valorEscalera = cartas[i + 4];\r\n            }\r\n        }\r\n        return valorEscalera;\r\n    }\r\n    private static int detectarCartasIguales(ArrayList<Carta> mano,ArrayList<Carta> manoMesa,int cuantoBuscar){/*En este caso necesitaremos recibir el numero de cartas iguales que buscar, ya que este metodo nos sirve para poker(4),trio(3) y pareja(2)*/\r\n        int contadorNumeros;\r\n        if(mano.get(0).getNumero()==mano.get(1).getNumero()){/*Al igual que en los metodos anteriores separamos los casos*/\r\n            contadorNumeros=2;\r\n            for (int i=0;i<manoMesa.size();i++){\r\n                if (manoMesa.get(i).getNumero() == mano.get(0).getNumero()) {\r\n                    contadorNumeros++;\r\n                }\r\n            }\r\n            return(contadorNumeros==cuantoBuscar)?mano.get(0).getNumero():0;\r\n        }else{\r\n            contadorNumeros=1;\r\n            int contadorVueltas=0;/*Con tesa variable sabemos cuando hemos salido del bucle para saber que cartas sde la mesa hemos utilizado para averiguar el color*/\r\n            for (int i = 0; i <mano.size()&&contadorNumeros!=cuantoBuscar; i++) {\r\n                contadorVueltas++;\r\n                contadorNumeros=1;\r\n                for (int j = 0; j < manoMesa.size(); j++) {\r\n                    if (manoMesa.get(j).getNumero() == mano.get(i).getNumero()) {\r\n                        contadorNumeros++;\r\n                    }\r\n                }\r\n            }\r\n            return (contadorNumeros==cuantoBuscar)?mano.get(contadorVueltas-1).getNumero():0;\r\n        }\r\n    }\r\n    private static int detectarDoblePereja(ArrayList<Carta> mano,ArrayList<Carta> manoMesa){\r\n       /*En este caso contamos con tres posibles casos, uno en el que tenemos una pareja en la mano y otra en la mesa(caso visto en el if), otro en el que temngo una carta en la mano,\r\n       su pareja en la mesa y otra pareja en la mesa (caso else if) y por ultimno el caso de tener una carta de cada pareja en la mano (else)*/\r\n        int contadorNumeros;\r\n        if(mano.get(0).getNumero()==mano.get(1).getNumero()&&buscarCartasIgualesEnMesa(mano,manoMesa,2)){\r\n            return mano.get(0).getNumero();\r\n        }else if (buscarCartasIgualesEnMesa(mano,manoMesa,2)) {\r\n            contadorNumeros=1;\r\n            int contadorVueltas=0;/*Con tesa variable sabemos cuando hemos salido del bucle para saber que cartas sde la mesa hemos utilizado para averiguar el color*/\r\n            for (int i = 0; i <mano.size()&&contadorNumeros!=2; i++) {\r\n                contadorVueltas++;\r\n                contadorNumeros=1;\r\n                for (int j = 0; j < manoMesa.size(); j++) {\r\n                    if (manoMesa.get(j).getNumero() == mano.get(i).getNumero()) {\r\n                        contadorNumeros++;\r\n                    }\r\n                }\r\n            }\r\n            return (contadorNumeros==2)?mano.get(contadorVueltas-1).getNumero():0;\r\n        }\r\n        else{\r\n            contadorNumeros=0;\r\n            int contadorVueltas=0;/*Con tesa variable sabemos cuando hemos salido del bucle para saber que cartas sde la mesa hemos utilizado para averiguar el color*/\r\n            for (int i = 0; i <mano.size()&&contadorNumeros!=4; i++) {\r\n                contadorVueltas++;\r\n                contadorNumeros++;\r\n                for (int j = 0; j < manoMesa.size(); j++) {\r\n                    if (manoMesa.get(j).getNumero() == mano.get(i).getNumero()) {\r\n                        contadorNumeros++;\r\n                    }\r\n                }\r\n            }\r\n            return (contadorNumeros==4)?cartaAlta(mano,manoMesa):0;\r\n        }\r\n    }\r\n    private static int detectarFull(ArrayList<Carta> mano,ArrayList<Carta> manoMesa){\r\n        if (buscarCartasIgualesEnMesa(mano,manoMesa,3)&&detectarCartasIguales(mano,manoMesa,2)>0){\r\n            return detectarCartasIguales(mano,manoMesa,2);\r\n        }\r\n        else if (detectarCartasIguales(mano,manoMesa,2)>0&&detectarCartasIguales(mano,manoMesa,3)>0) {\r\n            return cartaAlta(mano,manoMesa);\r\n        }else if (buscarCartasIgualesEnMesa(mano,manoMesa,2)&&detectarCartasIguales(mano,manoMesa,3)>0){\r\n            return detectarCartasIguales(mano,manoMesa,3);\r\n        }\r\n        return 0;\r\n    }\r\n    private static boolean buscarCartasIgualesEnMesa(ArrayList<Carta> mano,ArrayList<Carta> manoMesa,int numCartas){\r\n        /*buscamos el numeor de cartas que querramos iguales, pero solo en la mesa*/\r\n        int contadorCarta;\r\n        for (int i=0;i<(manoMesa.size()-1);i++){\r\n            contadorCarta=1;\r\n            for (int j=i+1;j<manoMesa.size();j++){\r\n                if (manoMesa.get(i).getNumero()==manoMesa.get(j).getNumero()){\r\n                    contadorCarta++;\r\n                    if (contadorCarta==numCartas)return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Mano.java b/src/Mano.java
--- a/src/Mano.java	(revision 1851d8381b9cf8c28f9567c686416c1423e5a981)
+++ b/src/Mano.java	(date 1714475093953)
@@ -3,7 +3,7 @@
 
 
 public class Mano {
-    public static int[] deterctarMano(ArrayList<Carta> mano, ArrayList<Carta> manoMesa){
+    public static int[] detectarMano(ArrayList<Carta> mano, ArrayList<Carta> manoMesa){
         int[]valorMano= {0,0};
         if (detectarEscaleraColor(mano, manoMesa)>0){
             valorMano[0]=8;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3d683796-464c-42a3-9423-713b6724548b\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2dgJiccXZgkhT3jhm53c7PXH62B\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/Alex/IdeaProjects/Proyecto Poker/src/Main.java&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"Proyecto Poker\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3d683796-464c-42a3-9423-713b6724548b\" name=\"Changes\" comment=\"\" />\r\n      <created>1710423918461</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1710423918461</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.lang.NullPointerException\" package=\"java.lang\" />\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1851d8381b9cf8c28f9567c686416c1423e5a981)
+++ b/.idea/workspace.xml	(date 1714476425899)
@@ -4,7 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="3d683796-464c-42a3-9423-713b6724548b" name="Changes" comment="" />
+    <list default="true" id="3d683796-464c-42a3-9423-713b6724548b" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/CalidadMano.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/CalidadMano.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Jugador.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Jugador.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Mano.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Mano.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -17,11 +22,15 @@
         <option value="Class" />
       </list>
     </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 4
 }</component>
   <component name="ProjectId" id="2dgJiccXZgkhT3jhm53c7PXH62B" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
@@ -30,6 +39,8 @@
   &quot;keyToString&quot;: {
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Alex/IdeaProjects/Proyecto Poker&quot;,
     &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/Alex/IdeaProjects/Proyecto Poker/src/Main.java&quot;
   }
 }</component>
@@ -57,6 +68,17 @@
       <updated>1710423918461</updated>
     </task>
     <servers />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: src/CalidadMano.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public enum CalidadMano {MALA, REGULAR, BUENA, MUY_BUENA}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CalidadMano.java b/src/CalidadMano.java
--- a/src/CalidadMano.java	(revision 1851d8381b9cf8c28f9567c686416c1423e5a981)
+++ b/src/CalidadMano.java	(date 1714122332768)
@@ -1,1 +1,2 @@
 public enum CalidadMano {MALA, REGULAR, BUENA, MUY_BUENA}
+// Dani putero
\ No newline at end of file
